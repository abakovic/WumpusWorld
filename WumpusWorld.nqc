                     /* GLOBAL VARIABLES */

int location[3];
int dangerPositions[9];
int coveredPath[16];
int counter = 0;
int counter2 = 0;
int gameStatus = 0;
int zone;

                        /* TASKS */
                        
// Initial task
task main()
{
    SetSensorType(SENSOR_2,SENSOR_TYPE_LIGHT);
    SetSensorMode(SENSOR_2,SENSOR_MODE_RAW);
    
    location[0] = 1;
    location[1] = 1;
    location[2] = 1;
    
    for(counter;counter<16;counter++)
        coveredPath[counter] = 0;
    for(counter;counter<9;counter++)
        dangerPositions[counter] = 0;
    start sensor;
    start decideNextMove;
}

// Controls program flow depending on the light sensor value //
task sensor()
{
    if(SensorValueRaw(1) < 726)
        zone = 0;
    else if(SensorValueRaw(1) >= 726 && SensorValueRaw(1) < 735)
    {
        zone = 2;
        gameStatus = 1;
        stop decideNextMove;
        start returnToStartPosition;
    }
    else if(SensorValueRaw(1) >= 735 && SensorValueRaw(1) < 745)
    {
        zone = 3;
        gameStatus = 3;
        stop decideNextMove;
    }
    else
        zone = 1;
}

/* Mapping the field values based on the current location, setting
   current position and deciding next move */
task decideNextMove()
{
    stop main;
    
    int possibleMoves[3];
    int currentPosition;
    int moveForward;
    int moveRight;
    int moveBack;
    int moveLeft;
    
    while(gameStatus==0)
    {
        if (location[0] == 1 && location[1] == 1)
        {
            currentPosition = 1;
            moveForward = 2;
            moveRight = 5;
            moveBack = 100;
            moveLeft = 100;
        }
        else if (location[0] == 2 && location[1] == 1)
        {
            currentPosition = 2;
            moveForward = 3;
            moveRight = 6;
            moveBack = 1;
            moveLeft = 100;
        }
        else if (location[0] == 3 && location[1] == 1)
        {
            currentPosition = 3;
            moveForward = 4;
            moveRight = 7;
            moveBack = 2;
            moveLeft = 100;
        }
        else if (location[0] == 4 && location[1] == 1)
        {
            currentPosition = 4;
            moveForward = 100;
            moveRight = 8;
            moveBack = 3;
            moveLeft = 100;
        }
        else if (location[0] == 1 && location[1] == 2)
        {
            currentPosition = 5;
            moveForward = 6;
            moveRight = 9;
            moveBack = 100;
            moveLeft = 1;
        }
        else if (location[0] == 2 && location[1] == 2)
        {
            currentPosition = 6;
            moveForward = 7;
            moveRight = 10;
            moveBack = 5;
            moveLeft = 2;
        }
        else if (location[0] == 3 && location[1] == 2)
        {
            currentPosition = 7;
            moveForward = 8;
            moveRight = 11;
            moveBack = 6;
            moveLeft = 3;
        }
        else if (location[0] == 4 && location[1] == 2)
        {
            currentPosition = 8;
            moveForward = 100;
            moveRight = 12;
            moveBack = 9;
            moveLeft = 4;
        }
        else if (location[0] == 1 && location[1] == 3)
        {
            currentPosition = 9;
            moveForward = 10;
            moveRight = 13;
            moveBack = 100;
            moveLeft = 5;
        }
        else if (location[0] == 2 && location[1] == 3)
        {
            currentPosition = 10;
            moveForward = 11;
            moveRight = 14;
            moveBack = 9;
            moveLeft = 6;
        }
        else if (location[0] == 3 && location[1] == 3)
        {
            currentPosition = 11;
            moveForward = 12;
            moveRight = 15;
            moveBack = 10;
            moveLeft = 7;
        }
        else if (location[0] == 4 && location[1] == 3)
        {
            currentPosition = 12;
            moveForward = 100;
            moveRight = 16;
            moveBack = 11;
            moveLeft = 8;
        }
        else if (location[0] == 1 && location[1] == 4)
        {
            currentPosition = 13;
            moveForward = 14;
            moveRight = 100;
            moveBack = 100;
            moveLeft = 9;
        }
        else if (location[0] == 2 && location[1] == 4)
        {
            currentPosition = 14;
            moveForward = 15;
            moveRight = 100;
            moveBack = 13;
            moveLeft = 10;
        }
        else if (location[0] == 3 && location[1] == 4)
        {
            currentPosition = 15;
            moveForward = 16;
            moveRight = 100;
            moveBack = 14;
            moveLeft = 11;
        }
        else
        {
           currentPosition = 16;
           moveForward = 100;
           moveRight = 100;
           moveBack = 15;
           moveLeft = 12;
        }

        StoreCurrentPosition(currentPosition);
        UpdateDangerPositions(currentPosition, moveForward, moveRight, moveLeft);

        if(zone == 0)
        {
           possibleMoves[0] = 1;
           for(zone;zone<16;zone++)
           {
               if(coveredPath[zone] == moveForward || moveForward == 100)
               {
                   possibleMoves[0] = 0;
                   break;
               }
           }
           possibleMoves[1] = 1;
           for(zone;zone<16;zone++)
           {
               if(coveredPath[zone] == moveRight || moveRight == 100)
               {
                   possibleMoves[1] = 0;
                   break;
               }
           }
           possibleMoves[2] = 1;
           for(zone;zone<16;zone++)
           {
               if(coveredPath[zone] == moveLeft || moveLeft == 100)
               {
                   possibleMoves[2] = 0;
                   break;
               }
           }
        }
        else if(zone == 1)
        {
           if(moveBack != 100)
           {
               counter = 0;
               counter2 = 0;
               for(zone; zone<17;zone++)
               {
                   if(coveredPath[zone-1] == moveRight-1)
                       counter +=1;
                   else if(coveredPath[zone-1] == moveLeft-1)
                       counter2 +=1;
                   if(counter > 0 && counter2 > 0)
                       break;
                   if(zone == 16)
                   {
                       for(zone; zone<25; zone++)
                       {
                           if(dangerPositions[zone-16] == moveRight-1)
                              counter+=1;
                           else if(dangerPositions[zone-16] == moveRight-1)
                              counter2+=1;
                       }
                   }
               }
               if(counter == 0 || counter2 == 0)
               {
                   while(location[2] != 3)
                       TurnRight();
                   GoForward();
                   counter = 100;
               }
           }
           if(counter != 100){
           possibleMoves[0] = 0;
           counter = 0;
           for(zone;zone<10;zone++)
           {
               if(moveForward == 100 || dangerPositions[zone-1] == moveForward+16)
                   break;
               if(zone == 9)
               {
                   for(zone;zone<25;zone++)
                   {
                       if(coveredPath[zone-9] == moveForward)
                          counter += 1;
                       if(zone == 24 && counter < 2)
                       {
                           possibleMoves[0] = 1;
                       }
                   }
               }
           }
           counter = 0;
           possibleMoves[1] = 0;
           for(zone;zone<10;zone++)
           {
               if(moveRight == 100 || dangerPositions[zone-1] == moveRight+16)
                   break;
               if(zone == 9)
               {
                   for(zone;zone<25;zone++)
                   {
                       if(coveredPath[zone-9] == moveRight)
                           counter += 1;
                       if(zone == 24 && counter < 2)
                       {
                           possibleMoves[1] = 1;
                       }
                   }
               }
           }
           counter = 0;
           possibleMoves[2] = 0;
           for(zone;zone<10;zone++)
           {
               if(moveLeft == 100 || dangerPositions[zone-1] == moveLeft+16)
                   break;
               if(zone == 9)
               {
                   for(zone;zone<25;zone++)
                   {
                       if(coveredPath[zone-9] == moveLeft)
                           counter += 1;
                       if(zone == 24 && counter < 2)
                           possibleMoves[2] = 1;
                   }
               }
           }}
        }
        if(counter != 100)
        {
            if((possibleMoves[0] + possibleMoves[1] + possibleMoves[2]) == 3)
            {
                counter = Random(2)+1;
                if(counter == 3)
                {
                    while(location[2] != 4)
                        TurnRight();
                    GoForward();
                }
                else
                {
                    while(location[2] != counter)
                        TurnRight();
                    GoForward();
                }
            }
            else if((possibleMoves[0] + possibleMoves[1] + possibleMoves[2]) == 1)
            {
                if(moveForward == 1)
                {
                    while(location[2] != 1)
                        TurnRight();
                    GoForward();
                }
                else if(moveRight == 1)
                {
                    while(location[2] != 2)
                        TurnRight();
                    GoForward();
                }
                else
                {
                    while(location[2] != 4)
                        TurnRight();
                    GoForward();
                }
            }
            else
            {
                counter = Random(1);
                if(counter == 0)
                {
                    if(moveForward == 1)
                    {
                        while(location[2] != 1)
                            TurnRight();
                        GoForward();
                    }
                    else
                    {
                        while(location[2] != 2)
                            TurnRight();
                        GoForward();
                    }
                }
                else
                {
                    while(location[2] != 4)
                        TurnRight();
                    GoForward();
                }
            }
        }
        start sensor;
    }
}

// When agent finds the gold, it returns to the start position
task returnToStartPosition()
{
    int currentPosition;
    int moveRight;
    int moveBack;
    int moveLeft;
    
    while(gameStatus == 1)
    {
        if (location[0] == 1 && location[1] == 1)
        {
            currentPosition = 1;
            moveRight = 5;
            moveBack = 100;
            moveLeft = 100;
        }
        else if (location[0] == 2 && location[1] == 1)
        {
            currentPosition = 2;
            moveRight = 6;
            moveBack = 1;
            moveLeft = 100;
        }
        else if (location[0] == 3 && location[1] == 1)
        {
            currentPosition = 3;
            moveRight = 7;
            moveBack = 2;
            moveLeft = 100;
        }
        else if (location[0] == 4 && location[1] == 1)
        {
            currentPosition = 4;
            moveRight = 8;
            moveBack = 3;
            moveLeft = 100;
        }
        else if (location[0] == 1 && location[1] == 2)
        {
            currentPosition = 5;
            moveRight = 9;
            moveBack = 100;
            moveLeft = 1;
        }
        else if (location[0] == 2 && location[1] == 2)
        {
            currentPosition = 6;
            moveRight = 10;
            moveBack = 5;
            moveLeft = 2;
        }
        else if (location[0] == 3 && location[1] == 2)
        {
            currentPosition = 7;
            moveRight = 11;
            moveBack = 6;
            moveLeft = 3;
        }
        else if (location[0] == 4 && location[1] == 2)
        {
            currentPosition = 8;
            moveRight = 12;
            moveBack = 9;
            moveLeft = 4;
        }
        else if (location[0] == 1 && location[1] == 3)
        {
            currentPosition = 9;
            moveRight = 13;
            moveBack = 100;
            moveLeft = 5;
        }
        else if (location[0] == 2 && location[1] == 3)
        {
            currentPosition = 10;
            moveRight = 14;
            moveBack = 9;
            moveLeft = 6;
        }
        else if (location[0] == 3 && location[1] == 3)
        {
            currentPosition = 11;
            moveRight = 15;
            moveBack = 10;
            moveLeft = 7;
        }
        else if (location[0] == 4 && location[1] == 3)
        {
            currentPosition = 12;
            moveRight = 16;
            moveBack = 11;
            moveLeft = 8;
        }
        else if (location[0] == 1 && location[1] == 4)
        {
            currentPosition = 13;
            moveRight = 100;
            moveBack = 100;
            moveLeft = 9;
        }
        else if (location[0] == 2 && location[1] == 4)
        {
            currentPosition = 14;
            moveRight = 100;
            moveBack = 13;
            moveLeft = 10;
        }
        else if (location[0] == 3 && location[1] == 4)
        {
            currentPosition = 15;
            moveRight = 100;
            moveBack = 14;
            moveLeft = 11;
        }
        else
        {
           currentPosition = 16;
           moveRight = 100;
           moveBack = 15;
           moveLeft = 12;
        }
        if(currentPosition != coveredPath[15] && coveredPath[15] != 0)
        {
            counter = 0;
            counter2 = 0;
            if(moveBack != 100)
            {
                for(counter;counter<9;counter++)
                {
                    if(dangerPositions[counter]==moveBack)
                        break;
                    if(counter == 8)
                    {
                        while(location[2] != 3)
                            TurnRight();
                        GoForward();
                    }
                }
            }
            else if(moveLeft != 100 && counter2 != 1)
            {
                for(counter;counter<9;counter++)
                {
                    if(dangerPositions[counter]==moveLeft)
                        break;
                    if(counter == 8)
                    {
                        while(location[2] != 4)
                            TurnRight();
                        GoForward();
                    }
                }
            }
            else if(moveRight != 100 && counter2 != 1)
            {
                for(counter;counter<9;counter++)
                {
                    if(dangerPositions[counter]==moveRight)
                        break;
                    if(counter == 8)
                    {
                        while(location[2] != 2)
                            TurnRight();
                        GoForward();
                    }
                }
            }
        }
        else
        {
            counter = 15;
            for(counter; counter>=0; counter--)
            {
                if(coveredPath[counter] == 0)
                    continue;
                if(coveredPath[counter] == 1)
                    break;
                counter2 = coveredPath[counter] - coveredPath[(counter-1)];
                if(counter2 == 1)
                {
                    while(location[2] != 4)
                        TurnRight();
                    GoForward();
                }
                else if(counter2 == 4)
                {
                    while(location[2] != 3)
                        TurnRight();
                    GoForward();
                }
                else if(counter2 == -4)
                {
                    while(location[2] != 2)
                        TurnRight();
                    GoForward();
                }
                else
                {
                    while(location[2] != 1)
                        TurnRight();
                    GoForward();
                }
            }
        }
        if(currentPosition == 1)
            gameStatus = 2;
    }
}

// Storing current field position
void StoreCurrentPosition(int _position)
{
    counter = 0;
    for(counter; counter<16; counter++)
    {
        if(coveredPath[counter] == 0)
        {
            coveredPath[counter] = _position;
            break;
        }
    }
}

// Defining and updating the danger zones informations
void UpdateDangerPositions(int _currentPosition, int _moveForward, int _moveRight, int _moveLeft)
{
    if(zone == 0)
    {
        for(zone; zone<9; zone++)
        {
            if(dangerPositions[zone] == _currentPosition || dangerPositions[zone] == _moveForward || dangerPositions[zone] == _moveRight || dangerPositions[zone] == _moveLeft)
                dangerPositions[zone] += 16;
        }
    }
    else if(zone == 1)
    {
        counter = 0;
        counter2 = 0;
        for(counter; counter<9; counter++)
        {
            if(dangerPositions[counter] == _currentPosition)
                dangerPositions[counter] += 16;
        }
        for(counter; counter<9; counter++)
        {
            if(dangerPositions[counter] == 0 && _moveForward != 100)
            {
                for(counter2; counter2<9; counter2)
                {
                    if(dangerPositions[counter2] == _moveForward || dangerPositions[counter2] == _moveForward+16)
                        break;
                    if(counter2 == 8)
                        dangerPositions[counter] = _moveForward;
                }
            }
        }
        for(counter; counter<9; counter++)
        {
            if(dangerPositions[counter] == 0 && _moveRight != 100)
            {
                for(counter2; counter2<9; counter2++)
                {
                    if(dangerPositions[counter2] == _moveRight || dangerPositions[counter2] == _moveRight+16)
                        break;
                    if(counter2 == 8)
                        dangerPositions[counter] = _moveRight;
                }
            }
        }
        for(counter; counter<9; counter++)
        {
            if(dangerPositions[counter] == 0 && _moveLeft != 100)
            {
                for(counter2; counter2<9; counter2++)
                {
                    if(dangerPositions[counter2] == _moveLeft || dangerPositions[counter2] == _moveLeft+16)
                        break;
                    if(counter2 == 8)
                        dangerPositions[counter] = _moveLeft;
                }
            }
        }
    }
}

void GoForward()
{
     if(location[2] == 1)
          location[0] += 1;
     else if(location[2] == 2)
          location[1] += 1;
     else if(location[2] == 3)
          location[0] -= 1;
     else if(location[2] == 4)
          location[1] -= 1;
          
     OnFwd(OUT_A+OUT_C);
     Wait(198);
     Off(OUT_A+OUT_C);
     Wait(100);
}

void TurnRight()
{
     if(location[2] == 4)
         location[2] = 1;
     else
         location[2] += 1;
         
     OnFwd(OUT_A);
     OnRev(OUT_C);
     Wait(80);
     Off(OUT_A+OUT_C);
     Wait(100);
}

